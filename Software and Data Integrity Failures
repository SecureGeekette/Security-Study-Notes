Software and Data integrity Failures - OWASP #8 in 2023

These failures relate to code and infrastructure that does not protect against integrity violations. An example is an application that relies on plugins, libraries or modules from untrusted sources, repositories and content delivery networks. Basically an insecure CI/ CD pipeline can introduce the potential for unauthorized access, malicious code or system compromise. 

Commonly seen issues:
1. Updates without verification: Many home routers, device firmwares etc. do not verify updates via signed firmware (growing target for attackers). Firmware FYI: Type of software that is etched directly into a piece of hardware. It operates without going through the API's, OS or device drivers (low level control for device specific hardware)
2. Many applications utilize the auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to a previously trusted application. Attackers could potentially upload their own updates to be distributed and run on installations.

Example: Solarwinds malicious update
Solarwinds is a network monitoring software that touches servers, firewalls, printers etc. (everything on the network). In the general Devops process developers check code out of a digital repository, change it and then check it back in. During checking in, they initiate the build process (i.e. compilation - translates the code a human can read to the code a computer does) - till this point code is clean and tested. The hackers created a temporary update file with the malicious code inside while the Solarwinds code was compiling (this was an Orion plugin, a typical library component found in Orion software update). The hacker's malicious code told the machine to swap in their temporary file instead of the Solarwinds version (bait & switch). The hackers made sure that this happens at the least possible second, before going out to customers. Since the compromised plugin was digitally signed with a compromised Solarwinds certificate, it was able to masquerade as a verified library. The interesting think is that this is not specific to Solarwinds, any number of other software developers using the same compiler can be at the receiving end of this attack. Also, due to the large number of networks exploited, they prioritized exploitation. They created passive Domain Name Server systems (from Amazon & GoDaddy) that sent IP's and a thumbnail profile of a potential target (.gov etc.) to help identify targets. The hackers also reverse-engineered how Orion communicares with servers and built their own coding instructions mimicking Orion's syntax and formats, so that their message traffic looked like a normal extension of software. The backdoor would ten remain dormat for 14 days before retrieving and executing commands that include the ability to transfer and execute files, profile the system, reboot the machine and disable system services. 
