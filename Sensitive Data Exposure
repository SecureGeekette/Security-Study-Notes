OWASP #2: Cryptographic Failures/ Sensitive Data Exposure

Rather than directly attacking cryptographic algorithms, attackers steal keys, execute man-in-the-middle attacks, or steal clear text data of the server, while in transit, or from the user's client (eg. browser).

For example:

1. An application encrypts credit card numbers in a database using automatic database encryption. However, this data is automatically decrypted when retrieved allowing an SQL injection flaw to retrieve credit card numbers in clear text.

2. A site doesn't use or enforce TLS for all pages or supports weak encryption. An attacker monitors network traffic (eg. at an insecure wireless network), downgrades network connections from HTTPS to HTTP, intercepts requests and steal's the users credentials/ session cookies. The attacker then replays this cookie and hijacks the user's (authenticated) session, accessing or modifying the user's private data. They could also alter transported data (eg. the recipient of a money transfer)

3. The password databases use simple or unsalted hashes to store everyone's passwords. All the unsalted hashes can be exposed with a rainbow table of pre-calculated hashes. Hashes generated by simple or fast hash functions may be cracked by GPU's even if they were salted.


Is the Application Vulnerable?

1. Is any data transmitted in clear text? Protocols such as HTTP, SMTP and FTP. Also verify the traffic between all internal systems such as load balancers, web servers or back-end systems.

2. Are any old or weak cryptographic algorithms used either by default or in code? Are deprecated hash functions such as MD5 and SHA1 in use?

3. Is encryption not enforced, eg. any user agent (browser) security directives or headers missing? 

4. Does the user agent (eg. app, mail client) not verify if the received server certificate is valid? Is the trust chain properly validated?

5. Are default crypto-keys in use? Weak crypto keys generated or re-used? Proper key management or rotation missing? Are crypto keys checked into source code repositories the developer has overwritten?

6. Is randomness used for cryptographic purposes not designed to meet cryptographic requirements? Even if the correct function is chosen, does it need to be seeded by the developer and if not, that lacks sufficient entropy?


How to prevent?

- Classify data processed, stored or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements or business need. This includes personally identifiable information (PII) such as credentials, health records, personal data amd credit card data.
- Apply security controls per the classification.
- Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI compliant tokenization or even truncation. Data that is not retained can't be stolen.
- Make sure to encrypt all sensitive data at rest.
- Ensure up-to-date and strong standard algorithms, protocols and keys are in place, use proper key management.
- Disable caching for responses that contain sensitive data.
- Encrypt all data in transit with secure protocols such as TLS with perfect forward secrecy (PFS) ciphers, cipher prioritization by the server and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).
- Store passwords using strong adaptive and salted hashing functions such as work factor (delay factor) such as Argon2, scrypt, bcrypt or PBKDF2. 
- Verify independently the effectiveness of configuration and settings. 


*How to secure a database*

1. Enforce strong password policies and multi-factor authentication
2. Implement the principle of least privilege ensuring users only have the necessary permissions. 
3. Configure access controls such as Row Level Security (for eg. in a healthcare application, doctors should only be able to access the medical records for their own patients)
4. Configure role based access controls - define sets of permissions for different job functions
5. Configure Attribute based access controls - access to financial data only during business hours (time based control), sepcific IP addresses are allowed to access sensitive data etc
3. Encrypt data at rest and in-transit using strong encryption and hashing algorithms
4. Keep the database management system and associated software up-to-date with latest security patches
5. Enable auditing to track database activities, including logins, queries and modifications
6. Implement real time monitoring/ alerting to detect and respond to suspicious activities
7. Regularly back up data and test backups for data restoration
8. Develop and test a comprehensive disaster recovery plan for quick service restoration
9. Follow secure coding practices to prevent common vulnerabilities such as SQL injection and cross site scripting
10. Use firewalls to restrict database access to trusted IP addresses
11. Deploy databases in isolated networks (different VPC)
12. Implement data masking or redaction to hide sensitive data in query results

Could you explain PKI (Public Key Infrastructure) and how it works?
Governs the issuance of digital certificates, provides unique digital identities for users, devices and applications and secure end to end communications.
Certificate signing requests are created by encoding the public key and signature. Certificates verify the owner of a private key. CA signs the cert with their own private key, CA hierarchies (intermediate CA'), revocation through certificate revocation lists etc.
