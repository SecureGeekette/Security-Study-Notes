OWASP #10 - Server side request forgery (increasing attack vector)

SSRF flaws occur whenever a web application is fetching a remote resource without validating the user supplied URL. It allows an attacker to coerce the application to send an crafted request to an unexpected destination.
Attackers can use SSRF to attack systems protected behind a web application firewall, firewalls or network ACL's using scenarios such as:

- Port scan internal servers: If the network architecture is unsegmented, attackers can map out internal networks and determine if ports are open or closed on internal servers from connection results or elapsed time to connect or reject SSRF payload connections.

- Sensitive data exposure: Attackers can access local files or internal services to gain information. eg. file://etc/passwd and http://localhost:28017/

- Access metadata storage of cloud services: most cloud providers have metadata storage at 169.254.169.254 which can be read to gain sensitive information.
eg in the URL field reference http://169.254.169.254, find out how the server is storing/ returning this data. Then do a curl request to retrieve this data, if we see directory information, we were successful in launching the virtual Instance Metadata Service (IMDS) on the cloud system. For eg. in our use case, we see "latest", this matches the config of an AWS server running IMDSv1. Then, we can continue to traverse this directory -> http://169.254.169.254 -> http://169.254.169.254/latest -> http://169.254.169.254/latest/meta-data -> We can see a lot of fields here indicating security credentials, ec2 instance information, subnet groups etc., selecting http://169.254.169.254/latest/meta-data/iam/security-credentials -> We can get access to access key, secret access key details etc. This can give the attacker access to the victim cloud environment with the privileges attached to the creds found.

- Compromise internal servers: The attackers can abuse internal services to conduct further attacks such as Remote Code Execution (RCE) or Denial of Service (DoS).

Prevention:

From Network Layer:
- Segment remote resource access functionality in separate networks to reduce the impact of SSRF
- Enforce "deny by default" firewall policies or network access control lists to block all but essential intranet traffic

From Application Layer:
- Sanitize and validate all client supplied input data
- Enforce the URL schema, port and destination with an allow list
- Disable HTTP redirections
- Do not send raw responses to client
- Be aware of the URL consistency to avoid attacks such as DNS rebinding and "time of check, time of use" race conditions.

Detection: Logging and alerting
- Access logs and error logs for the web servers should be stored and sent to a SIEM.
- Generate alerts which indicate "permission denied" errors in the error logs (which indicate attempts to read restricted files such as /etc/shadow)
- Have alerts for identifiers in access logs via string matching regex - which indicate credentials, iam (or related keyword in different cloud environments), file etc.

Practised this scenario in SANS GCIH - SSRF Lab

There's a dummy internship application website which has fields accepting URL's as valid input. There is no validation/ sanitization for these inputs. So when we submit URL's such as file:///etc/passwd as the URL to retrieve, the server performs a GET request for file:///etc/passwd and stores it as name.jpg (after form submission, find out how the server is storing the fields we requested). Although the browser does not render the file details, but when we do a curl request, we can view the ASCII file contents. If the curl command does not retrieve anything, this reveals that the SSRF file include attack failed. This can be due to permission restrictions/ non-existance of files on the server. 

We can also look at the default root directory for web servers (/var/www/html) - eg.index.html or source code repository stored here. Try to find fields such as username, password etc.
