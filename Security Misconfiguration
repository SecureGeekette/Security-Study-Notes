OWASP #5 - Security Misconfiguration

This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers and verbose error messages containing sensitive information. Not only must all OS, frameworks, libraries and applications be securely configured, they must be patched/ upgraded in a timely fashion.

Some examples:

1. Improperly configured permissions/ missing appropriate security hardening across any part of the application stack (network services, platform, web server, application server, database, frameworks, custom code, pre-installed virtual machines, containers or storage) - repeatable hardening processes should be introduced to make it fast and easy to deploy to another environment that is properly locked down and secure.

2. Default accounts and their passwords are still enabled and unchanged. 

3. Unnecessary features are enabled or installed (eg. unnecessary ports, services, pages, accounts and privileges) -> keep a minimal platform, remove or do not install unusused features or frameworks.

4. A segmented application architecture that provides effective, secure separation between components or tenants.

5. Error handling reveals stack traces or other informative error messages to users. 

6. The software is out of date or vulnerable or latest security features are disabled or not configured securely. Configurations must be updated according to updates or patches as part of the patch management process. 

7. The server does not send security headers or directives. This describes the HTTP response headers that our application can use to increase the security of the application:

- HTTP Strict Transport Security (HSTS): This allows web servers to declare that web browsers (or other complying web agents) should only interact with it using secure HTTPS connections and never via the insecure HTTP protocol. This helps prevent against protocol downgrade attacks and cookie hijacking. 

Values:
max-age(seconds) - The time in seconds that the browser should remember that this site is only to be accessed via HTTPS, If an optional parameter is specified, this rule can apply to the site's subdomains as well.


- X-Frame-Options: This frame header improves the protection of web applications against clickjacking. It instructs the browser whether the content can be displayed within frames. This has been replaced with the CSP header.

Values:
deny (i.e. no rendering within a frame)
sameorigin (no rendering if origin mismatch)
allow-from: DOMAIN (allows rendering if framed by frame selected from DOMAIN)

- X-Content-Type-Options: Setting this header will prevent the browser from interpreting files as a different MIME type as to what is specified in the Content-Type HTTP header (eg. treating text/plain as text/css)

Values:
nosniff - will prevent the browser from MIME sniffing a response away from the declared content type.

- Content Security policy (CSP): This parameter has significant impact on the way browsers render webpages (eg. inline Javascript is disabled by default and must be explicitly allowed in the policy). CSP prevents a wide range of attacks, including cross-site-scripting and cross-site-injections.

Values:
base-URI (defines the base URI for relative URIs)
default-src (defines loading policy for all resources type in case a resource type's dedicated directive is not defined)
script-src (defines which scripts the protected resource can execute)
img, media-src (defines from where the protected resource loads images, audio, videos)
frame-src (replaced by child-src, defines from where the resource can embed frames)
script-nonce (define script execution by requiring the presence of a specified nonce on script elements)


