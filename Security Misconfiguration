OWASP #5 - Security Misconfiguration

This is commonly a result of insecure default configurations, incomplete or ad hoc configurations, open cloud storage, misconfigured HTTP headers and verbose error messages containing sensitive information. Not only must all OS, frameworks, libraries and applications be securely configured, they must be patched/ upgraded in a timely fashion.

Some examples:

1. Improperly configured permissions/ missing appropriate security hardening across any part of the application stack (network services, platform, web server, application server, database, frameworks, custom code, pre-installed virtual machines, containers or storage) - repeatable hardening processes should be introduced to make it fast and easy to deploy to another environment that is properly locked down and secure.

2. Default accounts and their passwords are still enabled and unchanged. 

3. Unnecessary features are enabled or installed (eg. unnecessary ports, services, pages, accounts and privileges) -> keep a minimal platform, remove or do not install unusused features or frameworks.

4. A segmented application architecture that provides effective, secure separation between components or tenants.

5. Error handling reveals stack traces or other informative error messages to users. 

6. The software is out of date or vulnerable or latest security features are disabled or not configured securely. Configurations must be updated according to updates or patches as part of the patch management process. 

7. The server does not send security headers or directives. This describes the HTTP response headers that our application can use to increase the security of the application:

- HTTP Strict Transport Security (HSTS): This allows web servers to declare that web browsers (or other complying web agents) should only interact with it using secure HTTPS connections and never via the insecure HTTP protocol. This helps prevent against protocol downgrade attacks and cookie hijacking. 

Values:
max-age(seconds) - The time in seconds that the browser should remember that this site is only to be accessed via HTTPS, If an optional parameter is specified, this rule can apply to the site's subdomains as well.


- X-Frame-Options: This frame header improves the protection of web applications against clickjacking. It instructs the browser whether the content can be displayed within frames. This has been replaced with the CSP header.

Values:
deny (i.e. no rendering within a frame)
sameorigin (no rendering if origin mismatch)
allow-from: DOMAIN (allows rendering if framed by frame selected from DOMAIN)

- X-Content-Type-Options: Setting this header will prevent the browser from interpreting files as a different MIME type as to what is specified in the Content-Type HTTP header (eg. treating text/plain as text/css)

Values:
nosniff - will prevent the browser from MIME sniffing a response away from the declared content type.

- Content Security policy (CSP): This parameter has significant impact on the way browsers render webpages (eg. inline Javascript is disabled by default and must be explicitly allowed in the policy). CSP prevents a wide range of attacks, including cross-site-scripting and cross-site-injections.

Values:
base-URI (defines the base URI for relative URIs)
default-src (defines loading policy for all resources type in case a resource type's dedicated directive is not defined)
script-src (defines which scripts the protected resource can execute)
img, media-src (defines from where the protected resource loads images, audio, videos)
frame-src (replaced by child-src, defines from where the resource can embed frames)
script-nonce (define script execution by requiring the presence of a specified nonce on script elements)

- Referer: This header contains an absolute or partial address of the page making the request. This header allows servers to identify where people are visiting them from and is then used for analytics, logging, optimized caching and more. The referer policy governs which referer information should be included with the request made. 

Values:
no-referer (the referer header will be ommitted entirely. No referer information is sent along with requests)
origin (only send the origin of the document as the referer in all cases)
same-origin (referer will be sent for same site origins only)

- Clear-Site-data: This header clears browsing data (cookies, storage, cache) associated with the requesting website. It allows web developers to have more control over the data stored locally by the browser for their origins. For eg. In a logout process, this can ensure that all stored content on a client side are removed.

Values:
cache (the server wishes to remove locally cached data for the origin of the response URL)
cookies (server wishes to remove all cookies for the origin of the response URL. HTTP authentication credentials are also cleared out. This affects the entire registered domain, including subdomains)
* (clear all types of data for the origin of the response)

- Cross-Origin-Embedder Policy: This header prevents any document from loading cross origin sources that's don't explicitly grant the document permission.


8. XML External Entities (XXE): Attackers can exploit vulnerable XML processors if they can upload XML or include hostile content in an XML document, exploiting vulnerable code, dependencies or integrations. By default, many older XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML parsing. 

Example Attack Scenarios:

XXE can occur in a lot of unexpected places. The easiest way is to upload a malicious file:

Scenario #1: The attacker attempts to extract data from the server
<?xml versions="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM "file://etc/passwd">]>
<foo> &xxe; </foo>

Scenario #2: An attacker attempts a denial-of-service attack by including a potentially endless file
<!ENTITY xxe SYSTEM "file://dev/random">]>

Scenario #3: An attacker probes the server's private network by changing the above entity line to 
<!ENTITY xxe SYSTEM "file://192.168.1.1/private">]>

These flaws can basically be used to extract data, execute a remote request on the server, perform a DoS or other attacks. The business impact depends on the protection needs of all affected applications and data.

Is an application vulnerable?

- If the application accepts XML directly or XML uploads, especially from untrusted sources, or inserts untrusted data into XML documents, which is then parsed by a XML processor. 
- If any of the XML processors in the application or SOAP based web services have Document type Definition (DTD) enabled.
- If the application uses SAML for identity processing within federated security or single sign on (SSO) platform. SAML has XML for identity assertions and may be vulnerable.
- If the application uses SOAP prior to version 1.2, it is likely susceptible to XXE attacks if XML entities are being parsed to the SOAP framework.

How to prevent?

- Developer training is essential to identify and mitigate XXE
- Whenever possible, use less complex formats such as JSON and avoid serialization of sensitive data
- Patch or upgrade all XML processors and libraries in use by the application or in the underlying operating system, update SOAP to SOAP 1.2 or higher
- Disable XML external entity and DTD processing in all XML parsers
- Verify that XML or XSL file upload functionality validates incoming XML using XSD validation or similar
- SAST (Static Application Security Testing) Tools can help detect XXE in source code, although manual code reviews are also an alternative in large, complex applications with many integrations
- Implement positive ("whitelisting") server-side input validation, filtering or sanitization to prevent hostile data within XML documents, headers or nodes

If these controls are not possible, consider using virtual patching, API security gateways or web application firewalls (WAF's) to detect, monitor and block XXE attacks.
