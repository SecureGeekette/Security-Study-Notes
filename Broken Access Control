OWASP #1 2021 - Broken Access Control

Access control basically enforces policy so that users cannot act outside their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits.

Example Scenarios:

1. The application uses unverified data in a SQL call that is accessing account information.

Database example:
pstmt.setString(1, request.getParameter("acct"));
ResultSet results = pstmt.executeQuery();
An attacker simply modifies the browser's "acct" parameter to send whatever account number they want. If not correctly verified, the attacker can access any user's account.
eg. https://example.com/app/accountInfo?acct=notmyacct

This issue is also called "Insecure Direct Object Reference or IDOR". This is because the "notmyacct" numeric identifier is a direct reference to the user's record in the database. This identifier sometimes may not be in the URL, but rather in the POST body. The user's permission (object level authorization checks) must be verified each time an access attempt is made. Sometimes enumerable numeric identifiers can be replaced with complex, random identifiers. 

API Security example:
An automobile manufacturer has enabled remote control of its vehicles via a mobile API for communication with the driver's mobile phone. The API enables the driver to remotely start and stop the engine and lock and unlock the doors. As part of this flow, the user sends the Vehicle Identification Number (VIN) to the API. The API fails to validate that the VIN represents a vehicle that belongs to the logged in user, which leads to a BOLA vulnerability. An attacker can access vehicles that don't belong to him.

2. An attacker can simply force browsing to target URL's.
https://example.com/app/getappInfo - unauthenticated users should not be able to access this page
https://example.com/app/admin_getappInfo - non-admin users should not be able to access this page

3. Path Traversal issues
If a product uses external input to construct a pathname that should be within a restricted directory, but does not properly neutralize sequences such as "../" - which can help attackers traverse the file system outside of that directory

Example Language: Perl 
my $dataPath = "/users/cwe/profiles";
my $username = param("user");
my $profilePath = $dataPath . "/" . $username; //The intent is to access files such as /users/cwe/profiles/alice or /users/cwe/profiles/bob

open(my $fh, "<", $profilePath) || ExitError("profile read error: $profilePath");
print "<ul>\n";
while (<$fh>) {
print "<li>$_</li>\n";
}
print "</ul>\n";

But if the attacker provides a username string as ../../../etc/passwd or ../../../etc/shadow. The OS would resolve this path allowing the attacker ot read the password file.

- Validate all user input
- Use a WAF
- Use a CSP
- Log all inputs
- Use least privilege
