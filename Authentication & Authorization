Authentication is used to verify that you are who you say you are i.e. validate a user's identity.
User authentication is the priority while responding to a request made by a software application.

How do cookies work?

Cookies are small pieces of data sent from a web server and stored in a user's web browser while the user is browsing a website. They are essential for many web applications because they enable the server to remember stateful information as users navigate different pages or revisit the website. Here's how they function:

Identification: When you visit a website, the server sends a cookie containing a unique identifier to your browser.

Storage: The browser stores this cookie on your device. Subsequently, every time you make a request to the same website, the cookie is sent back to the server, allowing it to recognize you.

Session Management: Cookies help manage user sessions, store login credentials, remember items in a shopping cart, and personalize user experiences.

Set-Cookie: user_id=12345; expires=Wed, 09 Jun 2023 10:18:14 GMT; path=/; domain=.example.com; Secure; HttpOnly

Risks:
1. Session Hijacking: If a cookie is intercepted, an attacker can impersonate a user, leading to unauthorized access to sensitive data or actions on the website.
2. Cross-Site Scripting (XSS): Malicious scripts injected into a web page can steal cookies, enabling attackers to hijack user sessions.
3. Cross-Site Request Forgery (CSRF): Attackers trick users into performing actions on a website without their consent by utilizing their active sessions, often through manipulated URLs containing cookies.
4. Data Privacy Concerns: Cookies can store personal information, raising privacy issues, especially when third-party cookies track users across various websites without their consent.
5. Cookie Theft: Malware or malicious scripts can steal cookies from users' browsers, leading to security breaches or identity theft.

Let's discuss some commonly used authentication protocols:

Kerberos (Used in Active Directory):

Kerberos is a network authentication protocol developed by MIT. This is primarily used by a client to prove it's identity to a server over an insecure network connection using symmetric (or secret key cryptography).

High Level process is as follows:
1. The client/ user requests an authentication ticket called TGT (ticket granting ticket).
2. The Windows Server/ Domain Controller has a KDC (key Distribution Center) which verifies the credentials (via the authentication server) and sends back an encrypted TGT (via a Ticket granting server).
3. The client sends the current TGT to the TGS with the name of the resource the client wants to access (Request Ticket).
4. The TGS sends a valid session key for the service to the client.
5. The client stores the TGT and when it expires, the local session manager will request another TGT (from the Windows Server).
6. The client then requests the service using the valid session key
7. Server authentication occurs.

Details:

Client Server Authentication:
1. The client sends a cleartext message of the user ID to the authentication server requesting services on behalf of the user. (Neither the secret key nor the password is sent at this point).
2. The authentication server checks if the client/ requested user ID is in its database. If it is, the authentication server generates the secret key by hashing the password of the user found in the database (eg. Active Directory in Windows server) and sends back the following messages:
- TGS session key encrypted using the secret key of the client/user
- Ticket Granting Ticket which includes the client ID, client network addeess, ticket validity period and the TGS session key. All these parameters are encrypted using the secret key of the TGS.
3. Once the client receives the messages, it tries to decrypt the session key using the password entered by the user. If the user entered password does not match the password in the database, they will not be able to retrieve the session key.

Client Service Authorization:
1. The client sends the encrypted TGT received from the server and the ID of the client. They also send the client ID and timestamp encrypted using the TGS session key.
2. TGS retrieves the TGT since it has access to the TGS secret key. This gives it access to the session key. The server then compares the client ID from the TGT to the message received and if they match, the server sends the following:
- Client to Server ticket which includes client ID, client network address, validity period and the session key encrypted using the service's secret key.
- Client/ Server session key encrypted using the TGS session key.

Client Service Request:
- The client sends the client to server ticket encrypted using the service's secret key. The client also sends a new authenticator which includes the client ID, timestamp and is encrypted using the client/ server session key.
- The service server decrypt's the client to server ticket and obtains the session key which it uses to decrypt the new authenticator message, If all the details match, the server encrypts the timestamp.
- The client decrypts the timestamp, if it is correct the client can trust the server and start issuing service requests to the client.
- The server then provides the requested services to the client.


SAML (Security Assertion Markup Language)

Federated Login: This enables users to use a single authentication ticket/ token to obtain access across all networks of the different IT systems.

SAML is an open federation standard that allows an Identity Provider (IdP) to authenticate users and then pass an authentication token to another application known as Service Provider (SP). With SAML, you can enable SSO.

Identity Provider                                   Browser                                             Service Provider

                                                       ---->     User attempts to access a protected resource
                                                    Redirect the browser to the IdP for authentication with a SAML request <---- 
Access the IdP SSO endpoint   <------
Present a login form to the user ------>
Authenticate to the IdP with existing credentials <------
Validate credentials and generate SAML response ------>
                                                Post the SAML response (authentication and attribute statements) to the SP ---->
                                                                              Check authenticity of the response and extract details
                                                    Set Cookie  <--------
                                                Access as authenticated user


What is a SAML assertion?

A SAML assertion is a XML document that the IdP sends to the SP containing the user authorization status.
Authentication assertions help verify the identification of a user and provide the time a user logs in and which method of authentication is used (for eg. MFA, password, kerberos etc.)
Authorization assertion states if a user is authorized to use a service or if the IdP has denied the request (due a authentication failure or due to lack of rights to a service.


OAuth (built on OAuth Open ID Connect - Open Authorization)

OAuth is an authorization protocol that allows users to grant third-party applications limited access to their resources without sharing their credentials (like username and password) directly with the application. It works by enabling resource owners to delegate access to their resources (stored on one server) to a client aopplication (accessing the resources on behalf of the resource owner)

Here's how it works:

1. Client Registration: The client application (application that needs access to the user's resources) registers with the OAuth provider (authorization server). During registration, the client is issued a client ID and client secret. These credentials are used to authenticate the client with the authorization server. 

2. Authorization Request: When the user (resource owner) want to grant the client application access to their resources, the client initiates the OAuth process by redirecting the user to the authorization server. The client includes its client ID and specifies the scope of the access it needs (eg. read, write etc.) in the authorization request.

3. User authorization: The authorization server authenticates the user and presents them with a consent screen, informing them about the requested permissions the client making the request (user can grant or deny the request)

4. Authorization grant: If the user grants permissioon, the authorization server issues an authorization code to the client. The code is sent to the client's redirect URI.

5. Access Token Request: The client sends a request to the authorization server to exchange the authorization code for an access token. This token includes its client ID, client secret and authorization code.

6. Access Token Issuance: The authorization server validates the client's credentials and the authorization code. If everything is valid, the authorization server issues an access token to the client. 

7. Accessing Protected resources: The client includes the access token in the request to the resource server when accessing the protected resources. The resource server validates the access token and if valid and authorized for requested scope, the requested resource is served. 

8. Token Expiration and refresh: Access tokens have a limited lifespan. If the client needs prolonged access, it can use a refresh token to obtain a new access token without user interaction.



Authentication and Authorization between a client and a server

Static websites are easy to scale. You can cache the heck out of them and you donâ€™t have state to propagate between the various servers that deliver this content to end-users.

Unfortunately, most web applications need to carry some state in order to offer a personalized experience to users. If users can log into your site, then you need to keep sessions for them. The typical way that this is done is by setting a cookie with a random session identifier and storing session details on the server under this identifier.

Scaling a stateful service
Now, if you want to scale that service, you essentially have three options:

replicate that session data across all of the web servers,
use a central store that each web server connects to, or
ensure that a given user always hits the same web server
These all have downsides:

Replication has a performance cost and increases complexity.
A central store will limit scaling and increase latency.
Confining users to a specific server leads to problems when that
server needs to come down.
However, if you flip the problem around, you can find a fourth option: storing the session data on the client.

Client-side sessions
Pushing the session data to the browser has some obvious advantages:

the data is always available, regardless of which machine is serving a user
there is no state to manage on servers
nothing needs to be replicated between the web servers
new web servers can be added instantly
There is one key problem though: you cannot trust the client not to tamper with the session data.

For example, if you store the user ID for the userâ€™s account in a cookie, it would be easy for that user to change that ID and then gain access to someone elseâ€™s account.

While this sounds like a deal breaker, there is a clever solution to work around this trust problem: store the session data in a tamper-proof package. That way, there is no need to trust that the user hasnâ€™t modified the session data. It can be verified by the server.

What that means in practice is that you encrypt and sign the cookie using a server key to keep users from reading or modifying the session data. This is what client-sessions (a Node.js library) does.

Immediate revocation of Persona sessions
One of the main downsides of client-side sessions as compared to server-side ones is that the server no longer has the ability to destroy sessions.

Using a server-side scheme, itâ€™s enough to delete the session data thatâ€™s stored on the server because any cookies that remain on clients will now point to a non-existent session. With a client-side scheme though, the session data is not on the server, so the server cannot be sure that it has been deleted on every client. In other words, we canâ€™t easily synchronize the server state (user logged out) with the state thatâ€™s stored on the client (user logged in).

To compensate for this limitation, client-sessions adds an expiry to the cookies. Before unpacking the session data stored in the encrypted cookie, the server will check that it hasnâ€™t expired. If it has, it will simply refuse to honour it and consider the user as logged out.

While the expiry scheme works fine in most applications (especially when itâ€™s set to a relatively low value), in the case of Persona, we needed a way for users to immediately revoke their sessions as soon as they learn that they password has been compromised.

This meant keeping a little bit of state on the backend. The way we made this instant revocation possible was by adding a new token in the user table as well as in the session cookie.

Every API call that looks at the cookie now also reads the current token value from the database and compares it with the token from the cookie. Unless they are the same, an error is returned and the user is logged out.

The downside of this solution, of course, is the extra database read for each API call, but fortunately we already read from the user table in most of these calls, so the new token can be pulled in at the same time.



Securing Service to Service Communication

The frequency of service-to-service communication is higher in a microservices deployment. Communication can occur between two microservices within the same trust domain or between two trust domains. A trust domain represents the ownership. Microservices developed, deployed, and managed together probably fall under one trust domain, or the trust boundaries can be defined at the organizational level by taking many other factors into account. The security model that you develop to protect service-to-service communication should consider the communication channels that cross trust boundaries, as well as how the actual communication takes place between microservices: synchronously or asynchronously. In most cases, synchronous communication happens over HTTP. Asynchronous communication can happen over any kind of messaging system, such as RabbitMQ, Kafka, ActiveMQ, or even Amazon SQS. In chapter 6, chapter 7 and chapter 8 we discuss different security models to secure synchronous communication happens among microservices and chapter 9 talks about securing event-driven microservices.

1.5.1   Service-to-service authentication
You have three common ways to secure communication among services in a microservices deployment: trust the network, mutual transport layer security (mTLS), and JSON Web Tokens (JWTs).

The trust-the-network approach is an old-school model in which no security is enforced in service-to-service communication; rather, the model relies on network-level security (see figure 1.9). Network-level security must guarantee that no attacker can intercept communication among microservices. Also, each microservice is a trusted system. Whatever it claims about itself and the end user is trusted by other microservices. You should make this deployment choice based on the level of security you expect and the trust you keep on every component in the network.

Another school of thought, known as zero-trust network, opposes the trust-the-network approach. The zero-trust network approach assumes that the network is always hostile and untrusted, and it never takes anything for granted. Each request must be authenticated and authorized at each node before being accepted for further processing. If you are interested in reading more about zero-trust networks, we recommend you having a look at the book, Zero Trust Networks: Building Secure Systems in Untrusted Networks by Evan Gilman and Doug Barth (O'Reilly Media, 2017).

Figure 1.9 The trusted network makes sure that communication among microservices is secured. No one or a system outside the trusted network can see the traffic flows among microservices in the trusted network.

Mutual TLS (mTLS) is another popular way to secure service-to-service communications in a microservices deployment (see figure 1.10). In fact, this method is the most common form of authentication used today. Each microservice in the deployment has to carry a public/private key pair and uses that key pair to authenticate to the recipient microservices via mTLS. TLS provides confidentiality and integrity for the data in transit, and helps the client identify the service. The client microservice knows which microservice itâ€™s going to talk with. But with TLS (one-way), the recipient microservice canâ€™t verify the identity of the client microservice. Thatâ€™s where mTLS comes in. mTLS lets each microservice in communication identify the others. Challenges in mTLS include trust bootstrap and provisioning keys/certificates to workloads/microservices, key revocation, key rotation, and monitoring key use. We discuss those challenges and possible solutions in detail later in the book under chapter 6.

Figure 1.10 Communication among microservices is secured with mTLS. All the microservices communicate with each other trust the certificate authority (CA) in the deployment.

JSON Web Token (JWT) is the third approach for securing service-to-service communication in a microservices deployment (see figure 1.11). Unlike mTLS, JWT works at the application layer, not at the transport layer. JWT is a container that can carry a set of claims from one place to another. These claims can be anything, such as end-user attributes (email address, phone number), end-user entitlements (what he or she can do), or anything the calling microservice wants to pass to the recipient microservice. The JWT includes these claims and is signed by the issuer of the JWT. The issuer can be an external security token service (STS) or the calling microservice itself. The latter example is a self-issued JWT. As in mTLS, if we use self-issued JWT-based authentication, each microservice must have its own key pair, and the corresponding private key is used to sign the JWT. In most cases, JWT-based authentication works over TLS; JWT provides authentication, and TLS provides confidentiality and integrity of data in transit.

Figure 1.11 Communication among microservices is secured with JWT. Each microservice uses a certificate issued to it by the certificate authority to sign JWTs.

1.5.2   Service-level authorization
In a typical microservices deployment, authorization can happen at the edge (by the API gateway), at the service, or in both places. Authorization at service level gives each service the flexibility to do it the way it wants. Two approaches are used to enforce authorization at service level: the centralized policy decision point (PDP) model and the embedded PDP model. In the centralized PDP model, all the access-control policies are defined, stored, and evaluated centrally (see figure 1.12). Each time the service wants to validate a request, it has to talk to an endpoint exposed by the centralized PDP. This method creates a lot of dependency on the PDP and also badly affects latency due to the cost of calling the remote PDP endpoint. In some cases, the effect on latency can be prevented by caching policy decisions at service level, but other than cache expiration time, thereâ€™s no way to communicate policy update events to the service. In practice, policy updates happen less frequently, and cache expiration may work in most cases.

Figure 1.12 Each microservice is connected to a centralized PDP to authorize requests. All the access-control policies are defined, stored, and evaluated centrally

With embedded PDPs, policies are defined centrally but are stored and evaluated at service level. The challenge with embedded PDPs is how to get policy updates from the centralized policy administration point (PAP). There are two common methods. One approach is to poll the PAP continuously after a set period and then pull new and updated policies from PAP. The other approach is based on a push mechanism. Whenever a new policy or policy update is available, the PAP publishes an event to a topic (see figure 1.13). Each microservice acts as an event consumer and registers for the events itâ€™s interested in. Whenever a microservice receives an event for a registered topic, it pulls the corresponding policy from the PAP and updates the embedded PDP. Some people believe that both these approaches are overkill, however; they load policies to the embedded PDP only when the server starts up from a shared location. Whenever a new policy or a policy update is available, each service has to restart.

Figure 1.13 Each microservice embeds a PDP. The embedded PDPs pull the policies from the policy administration point upon receiving a notification.

1.5.3   Propagating user context between microservices
When one microservice invokes another microservice, it needs to carry both the end-user identity and the identity of the microservice itself. When one microservice authenticates to another microservice with mTLS or JWT, the identity of the calling microservice can be inferred from the embedded credentials. There are two common ways to pass the end-user context from one microservice to another microservice:

Send the user context as an HTTP header. This technique helps the recipient microservice identify the user but still has to trust the calling microservice. If the calling microservice wants to fool the recipient microservice, it can do so easily by setting any name it wants as the HTTP header.
Use a JWT. This JWT carries the user context from the calling microservice to the recipient microservice and is also passed in the HTTP request as a header. This approach has no extra value in terms of security over the first approach if the JWT that carries the user context is self-issued. A self-issued JWT is signed by the calling service itself, so it can fool the recipient microservice by adding any name it wants to add.
The most secure approach is to use a JWT issued by an external STS that is trusted by all the microservices in the deployment. The user context included in this JWT canâ€™t be altered, as alteration would invalidate the signature. When you have the JWT from an external STS, the calling microservice can embed it in the new JWT it creates to make a nested JWT (if JWT-based authentication is used between microservices) or pass as an HTTP header (if mTLS is being used between microservices).

1.5.4   Crossing trust boundaries
In a typical microservices deployment, you find multiple trust domains. We can define these trust domains by the teams having control and governance over the microservices or organizational boundaries. The purchasing department, for example, might manage all its microservices and create its own trust domain. In terms of security, when one microservice talks to another microservice, and if both of microservices are in the same trust domain, each microservice may trust one STS in the same domain or a certificate authority in the same domain. Based on this trust, the recipient microservice can validate a security token sent to it by a calling microservice. Typically, in a single trust domain, all the microservices trust one STS and accept only security tokens issued by that STS.

When one microservice wants to talk to another microservice in a different trust domain, it can take one of two primary approaches. In the first approach (see figure 1.14), the calling microservice (Order Processing) in the foo trust domain wants to talk to the recipient microservice (Delivery) of the bar trust domain. First, it has to obtain a security token that is trusted by all the microservices in the bar trust domain. In other words, it needs to obtain a security token from the STS of the recipient trust domain.

Figure 1.14 Cross-domain security between two trust domains behind a single trusted API gateway (and a security token service). Each trust domain has its own security token service.

Hereâ€™s the numbered flow shown in figure 1.14:

Step 1â€”The API gateway routes the request from the client application to the Order Processing microservice in the foo trust domain, along with a JWT signed by the gateway (or by an STS attached to it). Because all the microservices in the foo trust domain trust the top-level STS, the Order Processing microservice accepts the token as valid. The JWT has an attribute called aud that defines the target system of the JWT. In this case, the value of aud is set to the Order Processing microservice of the foo trust domain. Ideally, if the Order Processing microservice receives a JWT with a different aud value, it must reject that JWT, even if its signature is valid. We discuss JWT in detail in chapter 7.
Step 2â€”The Order Processing microservice passes the original JWT that it got from the gateway (or STS at the top level) to the STS at the foo trust domain. Once again, the foo STS has to validate the aud value in the JWT it gets. If it cannot identify the audience of the token, must reject it.
Step 3â€”The foo STS returns a new JWT, which is signed by it and has an aud value targeting the STS in the bar trust domain.
Steps 4 and 5â€”The Order Processing microservice accesses the STS of the bar trust domain and exchanges the JWT from step 3 to a new JWT signed by the STS of the foo trust domain, with an aud value targeting the Delivery microservice.
Step 6â€”The Order Processing microservice accesses the Delivery microservice with the JWT obtained from steps 4 and 5. Because the STS of the bar domain signs this JWT and has a matching aud value, the Delivery microservice will accept the token.
In the second approach, the Order Processing microservice from the foo trust domain doesnâ€™t talk directly to the Delivery microservice of the bar trust domain. Each trust domain has its own API gateway, and communication among microservices happens via the gateways (see figure 1.15).

Figure 1.15 Cross-domain security between two trust domains behind two API gateways (and STSes)

Hereâ€™s the numbered flow shown in figure 1.15:

Step 1â€”The API gateway of the foo trust domain routes the request from the client application to the Order Processing microservice, along with a JWT signed by the gateway (or the foo STS). Because all the microservices in the foo trust domain trust the foo STS, the Order Processing microservice accepts the token as valid.
Step 2â€”The Order Processing microservice passes the original JWT that it got from the gateway (or the foo STS) to its own STS (which is also the foo STS).
Step 3â€”The foo STS returns a new JWT, which is signed by it and has an aud value targeting the API gateway of the bar trust domain.
Step 4â€”The Order Processing microservice accesses the Delivery microservice of the bar domain with the JWT obtained from step 3. Because the API gateway of the bar domain trusts the foo domain STS, it accepts the JWT as valid. The JWT is signed by the foo STS and has an aud value to match the bar API gateway.
Step 5â€”The bar API gateway talks to the bar STS to create its own JWT (signed by the bar STS) with an aud value to match the Delivery microservice.
Step 6â€”The bar API gateway forwards the request to the Delivery microservice along with the new JWT issued by the bar STS. Because the Delivery microservice trusts its own STS, the token is accepted as valid.

API Gateway

Using API Gateway or a similar construct can help you in validating tokens, adding throttling limits, validate input parameters.
