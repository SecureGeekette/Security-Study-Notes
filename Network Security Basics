
Common ports involving security, what are the risks and mitigations?

1. Port 22 (SSH): Secure Shell protocol is used for remote access to servers.
Port 3389 (Remote Desktop Protocol) - similar to SSH, but used for GUI based remote access instead of SSH's command line (risks and mitigations are same)

Risk: Unauthorized access to the system via brute-force attacks, password guessing or sniffing.
Mitigations: 
- If possible, disable password based authentication and use key based auth. If not possible, enforce strong and unique passwords.
- Implement Multi Factor Authentication (MFA).
- Implement rate limiting and account lockout policies (to prevent against brute force attacks)
- Limit SSH access to specific IP addresses or networks.
- Log and monitor SSH login attempts for suspicious activities - block IP addresses after multiple failed logon attempts.
- Change the default SSH port to reduce exposure to automated attacks.
- Disable root login via SSH to reduce attack surface.

2. Port 23 (Telnet): Unencrypted Text based protocol that allows users to remotely access systems.

Risk: Does not require authentication, anyone who can connect to port 23 can gain access - elevates risk of anauthorized access.
Mitigations:
- If possible, disable telnet and utilize SSH instead.
- Restrict Telnet traffic to trusted internal networks, preventing external access to port 23 (using firewalls, security groups, network access control lists).
- Log and monitor Telnet usage to detect and prevent unauthorized usage

3. Port 25 (Simple Mail Transfer Protocol): protocol used to send email

Risk: Email spoofing, phishing, spam and malware distribution
Mitigations:
- Use email filtering services and antivirus software to detect and block malicious emails.
- Implement SPF (sender policy framework)
- Implment DKIM (Domain Keys Identified Mail)
- Implement DMARC (Domain based message authentication, reporting and conformance)

4. Port 53 (Domain Name System)

Risk: DNS Spoofing, DDoS attacks
Mitigations:
- Implement DNSSEC (DNS Security Extensions) for your domain to ensure data integrity and authenticity in DNS responses - basically sign DNS data with cryptographic signatures
- Use rate limiting and employ DNS filtering (block access to malicious or phishing websites) to prevent against DDoS
- Chose a reputable DNS Hosting provider
- Configure firewalls to allow DNS traffic only trusted sources

5. Port 80 (HTTP) or Port 443 (HTTPS)

Risk: Web vulnerabilities, Data interception
Mitigations:
- Implement web application firewalls (WAFs) to filter malicious traffic and protect against attacks like SQL injection and XSS (Cross Site Scripting).
- Regularly update and patch web applications and web servers.
- Use HTTPS (TLS) to encrypt data in transit, protecting against eavesdropping/ man-in-the-middle attacks.

6. Port 139, 445 (SMB - Server Message Block) - network file sharing protocol used to access and manage files and resources on remote computers.

Risk: remote code excution, ransomware, lateral movement
- Keep systems patched and up-to-date against known vulnerabilities
- use strong, unique passwords and implement mandatory MFA
- restrict SMB access to trusted networks and use firewalls to block unnecessary SMB traffic
- implement network segmentation to limit the impact of lateral movement

7. Port 1521 (Oracle Database), Port 3306 (MySQL) or port 5432 (PostgreSQL)

Risk: Data Breaches, unauthorized access
Mitigations:
- Keep database software patched and up-to-date against known vulnerabilities
- Implement strong access controls limiting users privilege to the minimum necessary
- Limit database access to trusted hosts and use firewalls to restrict access
- Encrypt sensitive data at rest and transit
- Use prepared statements and parameterized queries (for SQL related databases) to prevent SQL injection attacks in code
- Use strong, unique passwords



How does HTTP work? Uses

HTTP (Hypertext Transfer Protocol) is a protocol used for transmitting data over the internet. It is the foundation of any data exchange on the Web and is a client-server protocol, which means requests are initiated by the recipient, usually the web browser. Here's how HTTP works and how it is used:

How HTTP Works:
Client-Server Model: HTTP follows a client-server model. The client, typically a web browser, sends requests to the server, which hosts the desired resources (such as web pages, images, or documents). The server processes these requests and sends back the appropriate responses.

Stateless Protocol: HTTP is stateless, meaning that each request from a client to the server is treated independently. The server doesn't retain any information about past requests from the same client. To maintain state across multiple requests, mechanisms like cookies or sessions are used.

Connectionless: HTTP is connectionless, which means that the server doesn't keep a connection open after sending a response. For each request, a new connection is established, and once the response is sent, the connection is closed.

Text-Based: HTTP messages are typically text-based, consisting of a request line, headers, and a message body (in the case of POST requests). These messages are human-readable, making it easy to debug and analyze the data being transmitted.

How HTTP Is Used:
Website Access: HTTP is used when you access a website using your web browser. When you enter a URL (Uniform Resource Locator) in your browser's address bar and hit Enter, your browser sends an HTTP request to the server hosting the website, asking for the specified web page.

Resource Retrieval: HTTP is used to retrieve various resources from a server. These resources can include HTML documents, images, stylesheets, JavaScript files, videos, and other types of files necessary for displaying a web page properly.

API Communication: HTTP is widely used for communication between web applications and APIs (Application Programming Interfaces). Applications can make HTTP requests to APIs to request data or perform specific actions. APIs respond to these requests with the necessary data, typically in JSON or XML format.

Form Submissions: When you submit a form on a website (such as a login form or a search bar), your browser sends the form data to the server using an HTTP request. The server processes the data and sends back an appropriate response.

Hyperlink Navigation: HTTP is used for hyperlink navigation. When you click on a link on a web page, your browser sends an HTTP request to the server associated with the link's URL, requesting the linked resource.


How does HTTPS work? Uses

HTTPs (Hypertext Transfer Protocol Secure) is the secure version of HTTP, which stands for Hypertext Transfer Protocol. It is the protocol used for transmitting data over the internet. The 'S' in HTTPS stands for 'Secure,' indicating that the communication between the user's web browser and the website's server is encrypted and secured. Here's how HTTPS works and how it is used:

How HTTPS Works:
Encryption: When you access a website using HTTPS, the data exchanged between your browser and the website's server is encrypted. This encryption ensures that even if someone intercepts the data being transmitted, they cannot read it without the proper decryption key.

Authentication: HTTPS also provides authentication, ensuring that the website you are connecting to is indeed the website it claims to be. This authentication is achieved through digital certificates issued by Certificate Authorities (CAs). Websites need to obtain an SSL/TLS certificate to enable HTTPS. When you connect to an HTTPS website, your browser checks the website's certificate to confirm its authenticity.

Data Integrity: HTTPS provides data integrity, meaning that the data cannot be altered or corrupted during transmission. If even a single bit of the transmitted data is altered, the decryption process at the receiver's end fails, indicating potential tampering.

How HTTPS Is Used:
Secure Data Transmission: HTTPS is widely used in scenarios where sensitive data, such as login credentials, payment information, or personal details, needs to be transmitted securely over the internet. Examples include online banking, e-commerce websites, and web applications that require user authentication.

Search Engine Ranking: Search engines, like Google, consider HTTPS as a ranking factor. Websites using HTTPS are often ranked higher in search engine results pages (SERPs) compared to non-secure websites. This ranking boost incentivizes website owners to implement HTTPS.

Trust and Credibility: HTTPS enhances the trustworthiness of websites. Visitors are more likely to trust and interact with a website if they see the padlock icon in the browser's address bar, indicating a secure connection.

Compliance and Regulation: Many data protection regulations, such as the General Data Protection Regulation (GDPR) in the European Union, require the use of encryption mechanisms like HTTPS to protect user data. Websites handling user information are legally obligated to implement secure connections.

Preventing Man-in-the-Middle Attacks: HTTPS helps prevent Man-in-the-Middle (MitM) attacks, where an attacker intercepts communication between two parties. Encrypted data transmission ensures that even if intercepted, the data remains unreadable to the attacker.

