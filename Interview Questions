Building scalable bot detection solution, how to detect ssl certs issued to domains similar to fb, malware detection process, sql queries on detecting badness from logs
code to output binary to decimal conversion
check if IP address is in the correct format
CSRF fixes , Cookies attributes, XXE fixes , Buffer Overflow and ASLR, XSS types and Fixes from browser headers to encoding, SQLi and 2nd over sqli.
How parameter queries and stored procedures calls works. Http response splitting and request smuggling. Zip slip , JWT attacks , Oauth attacks and PKCE working. Many more but couldn’t recall
1. Why you shouldn't send passwords in a GET request?
2. SSL Handshake
3. Secure Code Review of a login functionality written in python. Find vulnerabilities, mitigations and how to implement it.
4. Simple python program (don't remember the question).
add Injection attacks (SQL, Command, Remote Code, File Upload vulnerabilities), Hashing (collisions/attacks/SHA256 vs MD5 (insecure), securing passwords in applications and Windows/Unix, and parsing files in Python (find and sort log data) etc. 
How does ssh work? (With all possible details)
https://www.teamblind.com/post/design-review-for-security-engineering-M7Sr8h78?utm_source=share&utm_medium=normal&from=share_link

How do you analyze a suspicious email attachment?


As a security engineer, analyzing a suspicious email attachment involves a thorough and cautious examination to determine its legitimacy and potential risks. Here's a step-by-step guide:

Verification of Sender:

Check the sender's email address and display name. Verify if it aligns with known contacts or is expected. Be cautious of email addresses that mimic legitimate ones with slight variations.
Analyze Email Content:

Scrutinize the email body for any signs of phishing or social engineering techniques. Look for misspellings, grammatical errors, and unusual requests.
Examine Attachment Type:

Identify the type of attachment (e.g., Word document, PDF, executable). Malicious actors often use attachments to deliver malware or exploit vulnerabilities in specific file types.
Metadata Analysis:

Examine metadata within the attachment for anomalies. Check document properties, such as author information, creation date, and modification history, to identify inconsistencies.
File Signature Analysis:

Use antivirus software or online services to scan the attachment for known malware signatures. Keep antivirus definitions updated to detect the latest threats.
Dynamic Analysis (Sandboxing):

Execute the attachment in a controlled environment or sandbox to observe its behavior. This helps identify malicious activities that might not be evident through static analysis alone.
URL Analysis:

If the email contains URLs, analyze them for legitimacy. Check if the URLs are known to be associated with phishing or malicious sites. Use URL scanning services to identify potential threats.
Network Traffic Analysis:

Monitor network traffic when opening the attachment to detect any suspicious outbound connections. Unusual network behavior may indicate a malware infection.
Endpoint Analysis:

If possible, analyze the endpoint's behavior when interacting with the attachment. Look for signs of unauthorized access, file modifications, or other abnormal activities.
Check for Known Vulnerabilities:

If the attachment contains software (e.g., macros, scripts), check for known vulnerabilities associated with that software version.
User Training and Awareness:

Educate users on recognizing phishing emails and suspicious attachments. Encourage them to report such incidents promptly.
Incident Response:

If the analysis confirms malicious intent, follow the organization's incident response procedures. Isolate affected systems, gather evidence, and report the incident to relevant stakeholders.
Preventive Measures:

Implement email filtering solutions, SPF/DKIM/DMARC protocols, and endpoint protection to proactively prevent malicious emails and attachments from reaching users.
Continuous Improvement:

Learn from each analysis and incident to continuously improve security measures. Share insights with the security team and update security policies accordingly.
Always approach the analysis with a methodical and systematic mindset, taking into consideration both static and dynamic analysis techniques. Collaborate with other security professionals and organizations to stay informed about emerging threats and tactics.

How do you attack VPN?

What happens when you visit google.com in browser? (classic one)
When you type "google.com" into your browser's address bar and hit Enter, several processes occur behind the scenes to load the Google homepage. Here is a simplified overview of the steps involved:

Domain Name System (DNS) Resolution:

The browser initiates a DNS lookup to translate the human-readable domain "google.com" into an IP address. This process involves querying DNS servers to obtain the IP address associated with the domain.
Establishing a TCP Connection:

Once the IP address is obtained, the browser establishes a TCP (Transmission Control Protocol) connection to the web server at that IP address. For secure connections (HTTPS), a secure handshake using TLS (Transport Layer Security) occurs to establish an encrypted connection.
HTTP Request:

The browser sends an HTTP (Hypertext Transfer Protocol) request to the Google web server. The request includes information such as the type of request (GET in this case) and additional headers.
Server Processing:

The Google web server processes the request and generates a response. In the case of the Google homepage, the server may dynamically generate the HTML content to be sent back to the browser.
HTML Response:

The server sends back an HTML (Hypertext Markup Language) response to the browser. The HTML contains the structure of the webpage, including links to external resources such as stylesheets, scripts, and images.
Fetching External Resources:

The browser parses the HTML response and identifies external resources that need to be fetched, such as CSS (Cascading Style Sheets) for styling and JavaScript for interactivity. The browser sends additional requests to fetch these resources.
Rendering the Webpage:

The browser renders the webpage by combining the HTML content with stylesheets and executing JavaScript code. The rendered webpage is then displayed on the user's screen.
DNS Caching and Browser Cache:

To improve performance, the browser caches DNS information and stores copies of resources locally (in the browser cache). Subsequent visits to the same website may use these cached resources to reduce load times.
Ongoing Communication:

The browser may continue to communicate with the server to fetch additional resources or updates dynamically without requiring a full page reload. This interaction enhances the user experience by providing dynamic content.
User Interaction:

The user can interact with the webpage, perform searches, click on links, and engage with various features provided by the Google homepage.
It's important to note that the actual process involves more complexity, especially when considering optimizations, security measures, and the use of Content Delivery Networks (CDNs) to deliver content efficiently. The steps outlined here provide a high-level overview of the fundamental processes involved in loading a webpage like Google's homepage.

How do you find vulnerable software running on people’s work machines?
You visit a team website and get a 404 but everyone else on your team can access it, what is wrong?
A CEO of a well known company is sitting across from you at a coffee shop how do you hack into his email?
Your manager wants you to bring your work laptop to Defcon, how do you secure it from getting hacked?
What advice would you give engineers who want to design a secret management service like Kubernetes Vault?
An engineer comes and tells you his computer is slow, what do you do? You find out it’s a coin miner turned ransomware. How do you stop it from spreading on your network?
What is ARP poisoning and how do you mitigate it?
If you were an attacker who compromised a CA and stole the private key, how would you use it?
How would you attack the OAuth workflow?
Explain SSL handshake. How do certificates get provisioned?

The SSL handshake is a crucial process that occurs at the beginning of a secure communication session over HTTPS (Hypertext Transfer Protocol Secure) or other SSL/TLS (Transport Layer Security) protocols. The handshake is responsible for establishing a secure connection between a client (e.g., a web browser) and a server. During the SSL handshake, several steps are taken to authenticate both parties, negotiate encryption parameters, and exchange cryptographic keys.

Here is an overview of the SSL handshake process:

Client Hello:

The client initiates the handshake by sending a "ClientHello" message to the server. This message includes information about the client's supported SSL/TLS versions, encryption algorithms, and other capabilities.
Server Hello:

Upon receiving the "ClientHello," the server responds with a "ServerHello" message. This message includes information about the selected SSL/TLS version, encryption algorithm, and other parameters. The server may also include its digital certificate.
Server Certificate:

The server sends its digital certificate to the client. This certificate contains the server's public key, information about the server, and the digital signature of a Certificate Authority (CA) to verify the authenticity of the certificate.
Key Exchange:

The key exchange phase allows the client and server to agree on a set of symmetric encryption keys to be used for securing the actual data transmission. Various methods, such as RSA, Diffie-Hellman, or Elliptic Curve Diffie-Hellman, can be used for key exchange.
Authentication and Verification:

The client verifies the server's digital certificate to ensure the server's identity and authenticity. This involves checking the certificate's validity, verifying the CA's digital signature, and confirming that the certificate matches the server's identity.
Pre-master Secret:

The client generates a random "pre-master secret" and encrypts it using the server's public key from the received certificate. The server decrypts this message using its private key to obtain the shared secret.
Session Key Derivation:

Both the client and server independently derive the session keys from the exchanged pre-master secret and other parameters negotiated during the handshake. These session keys are used for symmetric encryption and message integrity.
Finished Messages:

Both the client and server send "Finished" messages to indicate that the handshake is complete. The encryption parameters and session keys are now established, and subsequent communication is secured.
Secure Data Transmission:

With the session keys in place, the client and server can now securely exchange data using symmetric encryption. The SSL/TLS protocol ensures the confidentiality and integrity of the transmitted information.
The provisioning of certificates involves obtaining a digital certificate from a trusted Certificate Authority (CA). The process generally includes:

Certificate Request:

The entity (e.g., a web server) generates a Certificate Signing Request (CSR), which contains information about the entity and its public key.
Submission to CA:

The CSR is submitted to a trusted CA, along with the necessary information for identity verification.
Identity Verification:

The CA verifies the identity of the entity requesting the certificate. This process may involve domain ownership validation, organization verification, or extended validation procedures.
Certificate Issuance:

Upon successful verification, the CA issues a digital certificate. The certificate includes the entity's public key, information about the entity, the CA's digital signature, and other relevant details.
Certificate Installation:

The entity installs the issued certificate on its server or device, making the public key and other certificate details accessible during the SSL handshake.
The SSL handshake, along with the provisioning of certificates, plays a crucial role in ensuring secure and authenticated communication over the internet. It establishes the foundation for encrypted and trusted interactions between clients and servers.

You see high volume of traffic to 169.254.169.254, what do you suspect? (guess which company asked this one)
A high volume of traffic to the IP address 169.254.169.254 is indicative of potential probing or malicious activity, especially in the context of cloud computing environments. In cloud environments, this IP address is often associated with the metadata service provided by cloud providers, such as Amazon Web Services (AWS), Microsoft Azure, or Google Cloud Platform (GCP). The metadata service allows virtual machines or instances within the cloud to retrieve information about themselves and the environment they are running in.

Here are some considerations when observing high traffic to 169.254.169.254:

Metadata Service Abuse:

The metadata service is intended for legitimate communication between instances and the cloud provider's infrastructure. Unusual or high volumes of traffic may indicate attempts to abuse the service for unauthorized access, reconnaissance, or exploitation.
Security Vulnerabilities:

High traffic to this IP address might be associated with attempts to exploit security vulnerabilities in the cloud platform. Malicious actors may try to gather sensitive information or gain unauthorized access by exploiting misconfigurations or weaknesses in the metadata service.
Instance Compromise:

A sudden increase in traffic to 169.254.169.254 could be a sign of a compromised instance that is actively communicating with the metadata service to extract information or execute commands.
Denial-of-Service (DoS) Attempt:

Malicious actors may attempt to overload the metadata service with a high volume of requests, leading to a denial-of-service condition. This could impact the normal functioning of the affected instances.
Security Monitoring Alerts:

Security monitoring systems should be configured to detect and alert on unusual or suspicious traffic patterns, including unexpected interactions with the metadata service.
If you observe such behavior, it's crucial to take immediate action to investigate and mitigate the potential threat. Steps may include:

Isolation: Isolate affected instances or resources to prevent further potential harm.

Investigation: Conduct a thorough investigation to identify the source and nature of the traffic. Analyze logs, network traffic, and any available forensics data.

Security Updates: Ensure that all software and configurations, including the cloud environment settings, are up to date with the latest security patches.

Incident Response: Follow incident response procedures to contain, eradicate, and recover from the security incident.

Enhanced Monitoring: Implement or enhance monitoring and alerting systems to quickly detect and respond to similar incidents in the future.

Security Best Practices: Review and implement cloud security best practices, including proper configuration of security groups, network ACLs, and access controls.



What are different types of XSS and how do you prevent it?
